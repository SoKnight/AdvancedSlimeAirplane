From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoKnight <mcliyanage2018@gmail.com>
Date: Mon, 7 Apr 2025 04:05:10 +0500
Subject: [PATCH] Upgrade to latest Java and Adventure


diff --git a/pom.xml b/pom.xml
index b1e5ae3183d2baf1a45298266fffb2564a2b5e29..8b6dee1f5203cfc110e9c01e8f77924c56779ae8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -14,8 +14,8 @@
         <bt.name>git</bt.name>
         <minecraft.version>1.16.5</minecraft.version>
         <minecraft_version>1_16_R3</minecraft_version>
-        <maven.compiler.source>17</maven.compiler.source>
-        <maven.compiler.target>17</maven.compiler.target>
+        <maven.compiler.source>21</maven.compiler.source>
+        <maven.compiler.target>21</maven.compiler.target>
     </properties>
 
     <parent>
@@ -105,7 +105,7 @@
         <dependency>
             <groupId>org.ow2.asm</groupId>
             <artifactId>asm</artifactId>
-            <version>9.1</version>
+            <version>9.8</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
diff --git a/src/main/java/io/papermc/paper/adventure/AdventureComponent.java b/src/main/java/io/papermc/paper/adventure/AdventureComponent.java
index 89597b4a3064c3c6001c7e927a848ee73a1b1fd9..044bd6ab8ed49100d87f8143eeb0fb966344cc3e 100644
--- a/src/main/java/io/papermc/paper/adventure/AdventureComponent.java
+++ b/src/main/java/io/papermc/paper/adventure/AdventureComponent.java
@@ -3,16 +3,18 @@ package io.papermc.paper.adventure;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
-import java.lang.reflect.Type;
-import java.util.List;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
 import net.minecraft.network.chat.ChatModifier;
 import net.minecraft.network.chat.IChatBaseComponent;
 import net.minecraft.network.chat.IChatMutableComponent;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
+import java.lang.reflect.Type;
+import java.util.List;
+
 public final class AdventureComponent implements IChatBaseComponent {
     final Component wrapped;
     private @MonotonicNonNull IChatBaseComponent converted;
@@ -50,7 +52,7 @@ public final class AdventureComponent implements IChatBaseComponent {
 
     @Override
     public String getString() {
-        return PaperAdventure.PLAIN.serialize(this.wrapped);
+        return PlainTextComponentSerializer.plainText().serialize(this.wrapped);
     }
 
     @Override
diff --git a/src/main/java/io/papermc/paper/adventure/NBTLegacyHoverEventSerializer.java b/src/main/java/io/papermc/paper/adventure/NBTLegacyHoverEventSerializer.java
index caa9708f321f04cd02534161231c05999bda4acd..a567a0997d10efa07a83843165513a295dc8bbed 100644
--- a/src/main/java/io/papermc/paper/adventure/NBTLegacyHoverEventSerializer.java
+++ b/src/main/java/io/papermc/paper/adventure/NBTLegacyHoverEventSerializer.java
@@ -1,19 +1,20 @@
 package io.papermc.paper.adventure;
 
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
-import java.io.IOException;
-import java.util.UUID;
 import net.kyori.adventure.key.Key;
 import net.kyori.adventure.nbt.api.BinaryTagHolder;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.event.HoverEvent;
-import net.kyori.adventure.text.serializer.gson.LegacyHoverEventSerializer;
-import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
+import net.kyori.adventure.text.serializer.json.LegacyHoverEventSerializer;
+import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
 import net.kyori.adventure.util.Codec;
 import net.minecraft.nbt.MojangsonParser;
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 
+import java.io.IOException;
+import java.util.UUID;
+
 final class NBTLegacyHoverEventSerializer implements LegacyHoverEventSerializer {
     public static final NBTLegacyHoverEventSerializer INSTANCE = new NBTLegacyHoverEventSerializer();
     private static final Codec<NBTTagCompound, String, CommandSyntaxException, RuntimeException> SNBT_CODEC = Codec.of(MojangsonParser::parse, NBTBase::toString);
@@ -31,11 +32,11 @@ final class NBTLegacyHoverEventSerializer implements LegacyHoverEventSerializer
 
     @Override
     public HoverEvent.ShowItem deserializeShowItem(final Component input) throws IOException {
-        final String raw = PlainComponentSerializer.plain().serialize(input);
+        final String raw = PlainTextComponentSerializer.plainText().serialize(input);
         try {
             final NBTTagCompound contents = SNBT_CODEC.decode(raw);
             final NBTTagCompound tag = contents.getCompound(ITEM_TAG);
-            return HoverEvent.ShowItem.of(
+            return HoverEvent.ShowItem.showItem(
                 Key.key(contents.getString(ITEM_TYPE)),
                 contents.hasKey(ITEM_COUNT) ? contents.getByte(ITEM_COUNT) : 1,
                 tag.isEmpty() ? null : BinaryTagHolder.encode(tag, SNBT_CODEC)
@@ -47,10 +48,10 @@ final class NBTLegacyHoverEventSerializer implements LegacyHoverEventSerializer
 
     @Override
     public HoverEvent.ShowEntity deserializeShowEntity(final Component input, final Codec.Decoder<Component, String, ? extends RuntimeException> componentCodec) throws IOException {
-        final String raw = PlainComponentSerializer.plain().serialize(input);
+        final String raw = PlainTextComponentSerializer.plainText().serialize(input);
         try {
             final NBTTagCompound contents = SNBT_CODEC.decode(raw);
-            return HoverEvent.ShowEntity.of(
+            return HoverEvent.ShowEntity.showEntity(
                 Key.key(contents.getString(ENTITY_TYPE)),
                 UUID.fromString(contents.getString(ENTITY_ID)),
                 componentCodec.decode(contents.getString(ENTITY_NAME))
diff --git a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
index 7b14b3c2486f03778d4673cf9684aa576dc2724a..304b91833c2dce606969e4f979d46fc9821ea4f1 100644
--- a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
+++ b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
@@ -2,12 +2,6 @@ package io.papermc.paper.adventure;
 
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import io.netty.util.AttributeKey;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 import net.kyori.adventure.bossbar.BossBar;
 import net.kyori.adventure.inventory.Book;
 import net.kyori.adventure.key.Key;
@@ -15,14 +9,17 @@ import net.kyori.adventure.nbt.api.BinaryTagHolder;
 import net.kyori.adventure.sound.Sound;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TranslatableComponent;
+import net.kyori.adventure.text.TranslationArgument;
 import net.kyori.adventure.text.flattener.ComponentFlattener;
 import net.kyori.adventure.text.format.TextColor;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import net.kyori.adventure.text.serializer.json.JSONOptions;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
+import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
 import net.kyori.adventure.translation.GlobalTranslator;
 import net.kyori.adventure.util.Codec;
 import net.minecraft.EnumChatFormat;
+import net.minecraft.SharedConstants;
 import net.minecraft.locale.LocaleLanguage;
 import net.minecraft.nbt.MojangsonParser;
 import net.minecraft.nbt.NBTTagCompound;
@@ -37,6 +34,13 @@ import org.bukkit.ChatColor;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
 public final class PaperAdventure {
     public static final AttributeKey<Locale> LOCALE_ATTRIBUTE = AttributeKey.valueOf("adventure:locale");
     private static final Pattern LOCALIZATION_PATTERN = Pattern.compile("%(?:(\\d+)\\$)?s");
@@ -45,7 +49,7 @@ public final class PaperAdventure {
             final @NonNull String translated = LocaleLanguage.a().a(translatable.key());
 
             final Matcher matcher = LOCALIZATION_PATTERN.matcher(translated);
-            final List<Component> args = translatable.args();
+            final List<TranslationArgument> args = translatable.arguments();
             int argPosition = 0;
             int lastIdx = 0;
             while (matcher.find()) {
@@ -61,7 +65,7 @@ public final class PaperAdventure {
                     try {
                         final int idx = Integer.parseInt(argIdx) - 1;
                         if (idx < args.size()) {
-                            consumer.accept(args.get(idx));
+                            consumer.accept(args.get(idx).asComponent());
                         }
                     } catch (final NumberFormatException ex) {
                         // ignore, drop the format placeholder
@@ -69,7 +73,7 @@ public final class PaperAdventure {
                 } else {
                     final int idx = argPosition++;
                     if (idx < args.size()) {
-                        consumer.accept(args.get(idx));
+                        consumer.accept(args.get(idx).asComponent());
                     }
                 }
             }
@@ -81,13 +85,15 @@ public final class PaperAdventure {
         })
         .build();
     public static final LegacyComponentSerializer LEGACY_SECTION_UXRC = LegacyComponentSerializer.builder().flattener(FLATTENER).hexColors().useUnusualXRepeatedCharacterHexFormat().build();
-    public static final PlainComponentSerializer PLAIN = PlainComponentSerializer.builder().flattener(FLATTENER).build();
+    public static final PlainTextComponentSerializer PLAIN = PlainTextComponentSerializer.builder().flattener(FLATTENER).build();
     public static final GsonComponentSerializer GSON = GsonComponentSerializer.builder()
         .legacyHoverEventSerializer(NBTLegacyHoverEventSerializer.INSTANCE)
+        .options(JSONOptions.byDataVersion().at(SharedConstants.getGameVersion().getWorldVersion()))
         .build();
     public static final GsonComponentSerializer COLOR_DOWNSAMPLING_GSON = GsonComponentSerializer.builder()
         .legacyHoverEventSerializer(NBTLegacyHoverEventSerializer.INSTANCE)
         .downsampleColors()
+        .options(JSONOptions.byDataVersion().at(SharedConstants.getGameVersion().getWorldVersion()))
         .build();
     private static final Codec<NBTTagCompound, String, IOException, IOException> NBT_CODEC = new Codec<NBTTagCompound, String, IOException, IOException>() {
         @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 6cb8608f8238c4a8c346b92ba672c8cc1c0cbcc4..4ac9b74f094c280b7026620f7ea5782560431439 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -8,24 +8,10 @@ import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
-import java.io.File;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import net.minecraft.SharedConstants;
 import net.minecraft.advancements.critereon.LootDeserializationContext;
 import net.minecraft.core.IRegistry;
-import net.minecraft.nbt.DynamicOpsNBT;
-import net.minecraft.nbt.MojangsonParser;
-import net.minecraft.nbt.NBTBase;
-import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.nbt.NBTTagString;
+import net.minecraft.nbt.*;
 import net.minecraft.resources.MinecraftKey;
 import net.minecraft.server.AdvancementDataWorld;
 import net.minecraft.server.MinecraftServer;
@@ -37,15 +23,9 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.material.FluidType;
 import net.minecraft.world.level.storage.SavedFile;
-import org.bukkit.Bukkit;
-import org.bukkit.Fluid;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Registry;
-import org.bukkit.UnsafeValues;
+import org.bukkit.*;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.legacy.CraftLegacy;
@@ -54,6 +34,12 @@ import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
 
+import java.io.File;
+import java.io.IOException;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
     public static final UnsafeValues INSTANCE = new CraftMagicNumbers();
@@ -77,7 +63,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public net.kyori.adventure.text.serializer.plain.PlainComponentSerializer plainComponentSerializer() {
+    public net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer plainComponentSerializer() {
         return io.papermc.paper.adventure.PaperAdventure.PLAIN;
     }
 
